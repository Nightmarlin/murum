// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: render/v1/render.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RenderServiceClient is the client API for RenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RenderServiceClient interface {
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error)
}

type renderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRenderServiceClient(cc grpc.ClientConnInterface) RenderServiceClient {
	return &renderServiceClient{cc}
}

func (c *renderServiceClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderResponse, error) {
	out := new(RenderResponse)
	err := c.cc.Invoke(ctx, "/render.RenderService/Render", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RenderServiceServer is the server API for RenderService service.
// All implementations must embed UnimplementedRenderServiceServer
// for forward compatibility
type RenderServiceServer interface {
	Render(context.Context, *RenderRequest) (*RenderResponse, error)
	mustEmbedUnimplementedRenderServiceServer()
}

// UnimplementedRenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRenderServiceServer struct {
}

func (UnimplementedRenderServiceServer) Render(context.Context, *RenderRequest) (*RenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Render not implemented")
}
func (UnimplementedRenderServiceServer) mustEmbedUnimplementedRenderServiceServer() {}

// UnsafeRenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RenderServiceServer will
// result in compilation errors.
type UnsafeRenderServiceServer interface {
	mustEmbedUnimplementedRenderServiceServer()
}

func RegisterRenderServiceServer(s grpc.ServiceRegistrar, srv RenderServiceServer) {
	s.RegisterService(&RenderService_ServiceDesc, srv)
}

func _RenderService_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderServiceServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/render.RenderService/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderServiceServer).Render(ctx, req.(*RenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RenderService_ServiceDesc is the grpc.ServiceDesc for RenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "render.RenderService",
	HandlerType: (*RenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Render",
			Handler:    _RenderService_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "render/v1/render.proto",
}
