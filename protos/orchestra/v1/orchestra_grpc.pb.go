// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: orchestra/v1/orchestra.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrchestraServiceClient is the client API for OrchestraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrchestraServiceClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	OAuthGetToken(ctx context.Context, in *OAuthGetTokenRequest, opts ...grpc.CallOption) (*OAuthGetTokenResponse, error)
	OAuthStartSession(ctx context.Context, in *OAuthStartSessionRequest, opts ...grpc.CallOption) (*OAuthStartSessionResponse, error)
}

type orchestraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrchestraServiceClient(cc grpc.ClientConnInterface) OrchestraServiceClient {
	return &orchestraServiceClient{cc}
}

func (c *orchestraServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, "/orchestra.OrchestraService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestraServiceClient) OAuthGetToken(ctx context.Context, in *OAuthGetTokenRequest, opts ...grpc.CallOption) (*OAuthGetTokenResponse, error) {
	out := new(OAuthGetTokenResponse)
	err := c.cc.Invoke(ctx, "/orchestra.OrchestraService/OAuthGetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orchestraServiceClient) OAuthStartSession(ctx context.Context, in *OAuthStartSessionRequest, opts ...grpc.CallOption) (*OAuthStartSessionResponse, error) {
	out := new(OAuthStartSessionResponse)
	err := c.cc.Invoke(ctx, "/orchestra.OrchestraService/OAuthStartSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrchestraServiceServer is the server API for OrchestraService service.
// All implementations must embed UnimplementedOrchestraServiceServer
// for forward compatibility
type OrchestraServiceServer interface {
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	OAuthGetToken(context.Context, *OAuthGetTokenRequest) (*OAuthGetTokenResponse, error)
	OAuthStartSession(context.Context, *OAuthStartSessionRequest) (*OAuthStartSessionResponse, error)
	mustEmbedUnimplementedOrchestraServiceServer()
}

// UnimplementedOrchestraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrchestraServiceServer struct {
}

func (UnimplementedOrchestraServiceServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedOrchestraServiceServer) OAuthGetToken(context.Context, *OAuthGetTokenRequest) (*OAuthGetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthGetToken not implemented")
}
func (UnimplementedOrchestraServiceServer) OAuthStartSession(context.Context, *OAuthStartSessionRequest) (*OAuthStartSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthStartSession not implemented")
}
func (UnimplementedOrchestraServiceServer) mustEmbedUnimplementedOrchestraServiceServer() {}

// UnsafeOrchestraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrchestraServiceServer will
// result in compilation errors.
type UnsafeOrchestraServiceServer interface {
	mustEmbedUnimplementedOrchestraServiceServer()
}

func RegisterOrchestraServiceServer(s grpc.ServiceRegistrar, srv OrchestraServiceServer) {
	s.RegisterService(&OrchestraService_ServiceDesc, srv)
}

func _OrchestraService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestraServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestra.OrchestraService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestraServiceServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestraService_OAuthGetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthGetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestraServiceServer).OAuthGetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestra.OrchestraService/OAuthGetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestraServiceServer).OAuthGetToken(ctx, req.(*OAuthGetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrchestraService_OAuthStartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthStartSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrchestraServiceServer).OAuthStartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orchestra.OrchestraService/OAuthStartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrchestraServiceServer).OAuthStartSession(ctx, req.(*OAuthStartSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrchestraService_ServiceDesc is the grpc.ServiceDesc for OrchestraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrchestraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orchestra.OrchestraService",
	HandlerType: (*OrchestraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _OrchestraService_Generate_Handler,
		},
		{
			MethodName: "OAuthGetToken",
			Handler:    _OrchestraService_OAuthGetToken_Handler,
		},
		{
			MethodName: "OAuthStartSession",
			Handler:    _OrchestraService_OAuthStartSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orchestra/v1/orchestra.proto",
}
