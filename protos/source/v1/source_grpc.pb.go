// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: source/v1/source.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceServiceClient is the client API for SourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceServiceClient interface {
	Artists(ctx context.Context, in *ArtistsRequest, opts ...grpc.CallOption) (*ArtistsResponse, error)
	Albums(ctx context.Context, in *AlbumsRequest, opts ...grpc.CallOption) (*AlbumsResponse, error)
	Tracks(ctx context.Context, in *TracksRequest, opts ...grpc.CallOption) (*TracksResponse, error)
	// All SourceService s must implement this. If it is an OAuthService Source
	// and the client has not yet performed the OAuth flow, then the client must
	// first call the OAuthService methods for this SourceService.
	// If the Service does not implement the OAuthService, then this should always
	// return true.
	IsUserAuthed(ctx context.Context, in *IsUserAuthedRequest, opts ...grpc.CallOption) (*IsUserAuthedResponse, error)
}

type sourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceServiceClient(cc grpc.ClientConnInterface) SourceServiceClient {
	return &sourceServiceClient{cc}
}

func (c *sourceServiceClient) Artists(ctx context.Context, in *ArtistsRequest, opts ...grpc.CallOption) (*ArtistsResponse, error) {
	out := new(ArtistsResponse)
	err := c.cc.Invoke(ctx, "/source.SourceService/Artists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Albums(ctx context.Context, in *AlbumsRequest, opts ...grpc.CallOption) (*AlbumsResponse, error) {
	out := new(AlbumsResponse)
	err := c.cc.Invoke(ctx, "/source.SourceService/Albums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) Tracks(ctx context.Context, in *TracksRequest, opts ...grpc.CallOption) (*TracksResponse, error) {
	out := new(TracksResponse)
	err := c.cc.Invoke(ctx, "/source.SourceService/Tracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceServiceClient) IsUserAuthed(ctx context.Context, in *IsUserAuthedRequest, opts ...grpc.CallOption) (*IsUserAuthedResponse, error) {
	out := new(IsUserAuthedResponse)
	err := c.cc.Invoke(ctx, "/source.SourceService/IsUserAuthed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceServiceServer is the server API for SourceService service.
// All implementations must embed UnimplementedSourceServiceServer
// for forward compatibility
type SourceServiceServer interface {
	Artists(context.Context, *ArtistsRequest) (*ArtistsResponse, error)
	Albums(context.Context, *AlbumsRequest) (*AlbumsResponse, error)
	Tracks(context.Context, *TracksRequest) (*TracksResponse, error)
	// All SourceService s must implement this. If it is an OAuthService Source
	// and the client has not yet performed the OAuth flow, then the client must
	// first call the OAuthService methods for this SourceService.
	// If the Service does not implement the OAuthService, then this should always
	// return true.
	IsUserAuthed(context.Context, *IsUserAuthedRequest) (*IsUserAuthedResponse, error)
	mustEmbedUnimplementedSourceServiceServer()
}

// UnimplementedSourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSourceServiceServer struct {
}

func (UnimplementedSourceServiceServer) Artists(context.Context, *ArtistsRequest) (*ArtistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Artists not implemented")
}
func (UnimplementedSourceServiceServer) Albums(context.Context, *AlbumsRequest) (*AlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Albums not implemented")
}
func (UnimplementedSourceServiceServer) Tracks(context.Context, *TracksRequest) (*TracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tracks not implemented")
}
func (UnimplementedSourceServiceServer) IsUserAuthed(context.Context, *IsUserAuthedRequest) (*IsUserAuthedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserAuthed not implemented")
}
func (UnimplementedSourceServiceServer) mustEmbedUnimplementedSourceServiceServer() {}

// UnsafeSourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceServiceServer will
// result in compilation errors.
type UnsafeSourceServiceServer interface {
	mustEmbedUnimplementedSourceServiceServer()
}

func RegisterSourceServiceServer(s grpc.ServiceRegistrar, srv SourceServiceServer) {
	s.RegisterService(&SourceService_ServiceDesc, srv)
}

func _SourceService_Artists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Artists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.SourceService/Artists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Artists(ctx, req.(*ArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_Albums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Albums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.SourceService/Albums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Albums(ctx, req.(*AlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_Tracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).Tracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.SourceService/Tracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).Tracks(ctx, req.(*TracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceService_IsUserAuthed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserAuthedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceServiceServer).IsUserAuthed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/source.SourceService/IsUserAuthed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceServiceServer).IsUserAuthed(ctx, req.(*IsUserAuthedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceService_ServiceDesc is the grpc.ServiceDesc for SourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "source.SourceService",
	HandlerType: (*SourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Artists",
			Handler:    _SourceService_Artists_Handler,
		},
		{
			MethodName: "Albums",
			Handler:    _SourceService_Albums_Handler,
		},
		{
			MethodName: "Tracks",
			Handler:    _SourceService_Tracks_Handler,
		},
		{
			MethodName: "IsUserAuthed",
			Handler:    _SourceService_IsUserAuthed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "source/v1/source.proto",
}
